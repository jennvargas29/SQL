CREATE DATABASE Warehouse_database;
USE Warehouse_database;

CREATE TABLE Region(
		region_id INT, 
        region_name VARCHAR(100),
        super_region_id INT,
        PRIMARY KEY (region_id)
);
INSERT INTO Region(region_id, region_name, super_region_id)
VALUES 
(101,'North America', null),
(102, 'USA', 101),
(103, 'Canada', 101),
(104, 'USA-Northeast', 102),
(105, 'USA-Southeast', 102),
(106, 'USA-West', 102),
(107, 'Mexico', 101);

CREATE TABLE Product(
		product_id INT NOT NULL,
        product_name VARCHAR(100),
        PRIMARY KEY (product_id)
);

INSERT INTO Product(product_id, product_name) 
VALUES
(1256, 'Gear-Large'),
(4437, 'Gear-Small'),
(5567, 'Crankshaft'),
(7684, 'Sprocket');

CREATE TABLE Sales_Totals(
		product_id INT  NOT NULL,
        region_id INT,
        year INT,
        month INT, 
        sales INT,
        PRIMARY KEY (product_id, region_id, year, month),
        FOREIGN KEY (product_id) REFERENCES Product(product_id),
        FOREIGN KEY (region_id) REFERENCES Region(region_id)
);

INSERT INTO Sales_Totals(product_id, region_id, year, month, sales) 
VALUES
(1256,104,2020,1,1000),
(4437,105,2020,2,1200),
(7684,106,2020,3,800),
(1256,103,2020,4,2200),
(4437,107,2020,5,1700),
(7684,104,2020,6,750),
(1256,104,2020,7,1100),
(4437,105,2020,8,1050),
(7684,106,2020,9,600),
(1256,103,2020,10,1900),
(4437,107,2020,11,1500),
(7684,104,2020,12,900);


-- Write a SELECT statement to return the month column, as well as an additional column for the quarter (1, 2, 3, or 4) that is based on the month.  Please use a CASE expression for this and do not alter the table.
SELECT month,
	CASE 
		WHEN month IN (1,2,3)
			THEN 1
		WHEN month IN (4,5,6)
			THEN 2
		WHEN month IN (7,8,9)
			THEN 3
		ELSE 4
	END quarter
FROM Sales_Totals
ORDER BY month;


-- Write a query that will pivot the Sales_Totals data so that there is a column for each of the 4 products containing the total sales across all months of 2020.  It is OK to include the product_id values in your query.
SELECT product_id,
	(SELECT sum(sales) FROM Sales_Totals s
		LEFT JOIN Product p 
			ON s.product_id = p.product_id
	 WHERE p.product_id = 1256) AS tot_sales_large_gears,lk
     
     (SELECT sum(sales) FROM Sales_Totals s
		LEFT JOIN Product p 
			ON s.product_id = p.product_id
	 WHERE p.product_id = 4437) AS tot_sales_small_gears,
     
     (SELECT sum(sales) FROM Sales_Totals s
		LEFT JOIN Product p 
			ON s.product_id = p.product_id
	 WHERE p.product_id = 5567) AS tot_sales_cranckshaft,
     
     (SELECT sum(sales) FROM Sales_Totals s
		LEFT JOIN Product p 
			ON s.product_id = p.product_id
	 WHERE p.product_id = 7684) AS tot_sales_sprocket
     
FROM Sales_Totals;


-- Write a query that retrieves all columns from the Sales_Totals table, along with a column called sales_rank which assigns a ranking to each row based on the value of the Sales column in descending order. Please use SQL RANK functions shown in the class video.
SELECT *,
	RANK() OVER (ORDER BY sales desc) AS sales_rank
FROM Sales_Totals;


-- Write a query that retrieves all columns from the Sales_Totals table, along with a column called product_sales_rank which assigns a ranking to each row based on the value of the Sales column in descending order, with a separate set of rankings for each product. Please use SQL RANK functions shown in the class video.
SELECT *,
	RANK() OVER (PARTITION BY product_id ORDER BY sales desc) AS product_sales_rank
FROM Sales_Totals;

-- Expand on the query from question #4 by adding logic to return only those rows with a product_sales_rank of 1 or 2.
SELECT *
FROM (
	SELECT *,
		RANK() OVER (PARTITION BY product_id ORDER BY sales desc) AS product_sales_rank
	FROM Sales_Totals) ps
WHERE product_sales_rank IN (1,2);


-- Write a set of SQL statements which will add a row to the Region table for Europe, and then add a row to the Sales_Total table for the Europe region and the Sprocket product (product_id = 7684) for October 2020, with a sales total of $1,500. You can assign any value to the region_id column, as long as it is unique to the Region table. The statements should be executed as a single unit of work. Please note that since the statements are executed as a single unit of work, additional code is needed.
START TRANSACTION;
INSERT INTO Region(region_id, region_name, super_region_id)
VALUES (108, 'Europe', null);
INSERT INTO Sales_Totals(product_id, region_id, year, month, sales)
VALUES (7684, 108, 2020, 10, 1500);
COMMIT;

-- Write a statement to create a view called Product_Sales_Totals which will group sales data by product and year.  Columns should include product_id, year, product_sales, and gear_sales. The gear_sales column will contain the total sales for the “Gear - Large” or the total sales for “Gear Small” products, depending on the product_id.  In the case that the product is neither “Gear - Large” or “Gear Small”, the value for gear_sales should be 0. (The data should be generated by an expression, and it is OK to use the product_id values in the expression).  To accomplish this, you need a CASE statement. The product_sales column should be a sum of sales for the particular product_id and year, regardless of what kind of product it is (including gears).
CREATE OR REPLACE VIEW
	Product_Sales_Totals AS 
SELECT DISTINCT s.product_id, s.year ,
       SUM(s.sales) OVER(PARTITION BY s.product_id,s.year ) AS product_sales,
       CASE WHEN product_id= 1256 THEN SUM(sales) OVER (PARTITION BY product_id)
			WHEN product_id= 4437 THEN SUM(sales) OVER (PARTITION BY product_id)
            ELSE 0 
		END gear_sales
FROM Sales_Totals s;


-- Write a query to return all sales data for 2020, along with a column called “pct_product_sales” showing the percentage of sales for each product by region_id and month.  Columns should include product_id, region_id, month, sales, and pct_product_sales. The values in pct_product_sales should add up to 100% for each product.
SELECT product_id, region_id, month, sales,
	ROUND(100*(monthly_region_sales/total_sales), 1) AS pct_product_sales
FROM
	(SELECT *,
		SUM(sales) OVER() AS total_sales,
		SUM(sales) OVER(PARTITION BY region_id, month) monthly_region_sales
     FROM Sales_Totals
     ) st 
WHERE year =2000;

-- Write a query to return the year, month, and sales columns, along with a 4th column named prior_month_sales showing the sales from the prior month.  There are only 12 rows in the sales_totals table, one for each month of 2020, so you will not need to group data or filter/partition on region_id or product_id. Please use a windowing function for this as shown in the class video.
SELECT year, month, sales,
	lag(sales) 
		over (order by month) prior_month_sales
FROM Sales_Totals;


-- If the tables used in this prompt are in the ‘sales’ database, write a query to retrieve the name and type of each of the columns in the Product table. Please specify the 'sales' schema in your answer. (You can test with the actual name of your schema and then replace the name with 'sales').
SELECT COLUMN_NAME, 
	    COLUMN_TYPE
FROM  INFORMATION_SCHEMA.COLUMNS
WHERE table_schema= 'sales' AND
      table_name="Product";
